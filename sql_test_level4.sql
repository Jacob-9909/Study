-- 연간 평가점수에 해당하는 평가 등급 및 성과금 조회하기 --
SELECT E.EMP_NO, E.EMP_NAME,CASE
WHEN AVG(G.SCORE) >= 96 THEN 'S'
WHEN AVG(G.SCORE) >= 90 THEN 'A'
WHEN AVG(G.SCORE) >= 80 THEN 'B'
ELSE 'C'
END AS GRADE, CASE
WHEN AVG(G.SCORE) >= 96 THEN E.SAL * 0.2
WHEN AVG(G.SCORE) >= 90 THEN E.SAL * 0.15
WHEN AVG(G.SCORE) >= 80 THEN E.SAL * 0.1
ELSE E.SAL * 0
END AS BONUS
FROM HR_EMPLOYEES AS E JOIN HR_GRADE AS G
ON E.EMP_NO = G.EMP_NO
GROUP BY E.EMP_NO
ORDER BY E.EMP_NO


-- 특정 기간동안 대여 가능한 자동차들의 대여비용 구하기 --
SELECT
    A.CAR_ID, A.CAR_TYPE, 
    TRUNCATE(DAILY_FEE * 30 * (1 - DISCOUNT_RATE/100), 0) AS FEE
FROM
    CAR_RENTAL_COMPANY_CAR A 
    LEFT OUTER JOIN CAR_RENTAL_COMPANY_DISCOUNT_PLAN C
    ON A.CAR_TYPE = C.CAR_TYPE AND DURATION_TYPE = '30일 이상'
WHERE
    A.CAR_TYPE IN ('세단', 'SUV') AND
    DAILY_FEE * 30 * (1 - DISCOUNT_RATE/100) >= 500000 AND
    DAILY_FEE * 30 * (1 - DISCOUNT_RATE/100) < 2000000 AND
    A.CAR_ID NOT IN
    (SELECT 
        CAR_ID 
    FROM
        CAR_RENTAL_COMPANY_RENTAL_HISTORY
    WHERE
        (START_DATE LIKE '2022-11-%' OR END_DATE LIKE '2022-11-%')
        OR
        (START_DATE <= '2022-11-01' AND END_DATE >= '2022-11-30'))
ORDER BY 
    FEE DESC, CAR_TYPE ASC, CAR_ID DESC


-- 저자 별 카테고리 별 매출액 집계하기 --
WITH SALE AS (SELECT BOOK_ID, DATE_FORMAT(SALES_DATE,'%Y-%m') AS SALES_DATE, SUM(SALES) AS SALE_NUM
             FROM BOOK_SALES
             WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = '2022-01'
             GROUP BY BOOK_ID)

SELECT A.AUTHOR_ID, A.AUTHOR_NAME, B.CATEGORY, SUM(S.SALE_NUM * B.PRICE) AS TOTAL_SALES
FROM SALE AS S JOIN BOOK AS B
ON B.BOOK_ID = S.BOOK_ID
LEFT JOIN AUTHOR AS A
ON B.AUTHOR_ID = A.AUTHOR_ID
GROUP BY A.AUTHOR_ID, B.CATEGORY
ORDER BY A.AUTHOR_ID,B.CATEGORY DESC;


-- 년, 월, 성별 별 상품 구매 회원 수 구하기 -- 
WITH ONLINE_SALE_DATE AS (
    SELECT ONLINE_SALE_ID, USER_ID, PRODUCT_ID, SALES_AMOUNT, YEAR(SALES_DATE) AS YEAR, 
    MONTH(SALES_DATE) AS MONTH
    FROM ONLINE_SALE)

SELECT S.YEAR, S.MONTH, I.GENDER, COUNT(DISTINCT S.USER_ID) AS USERS
FROM ONLINE_SALE_DATE AS S JOIN USER_INFO AS I
ON S.USER_ID = I.USER_ID
WHERE I.GENDER IS NOT NULL
GROUP BY S.YEAR, S.MONTH, I.GENDER
ORDER BY S.YEAR, S.MONTH, I.GENDER


-- 주문량이 많은 아이스크림들 조회하기 --
WITH TOTAL AS (SELECT H.FLAVOR, SUM(H.TOTAL_ORDER)+SUM(J.TOTAL_ORDER) AS TOTAL_SUM
FROM FIRST_HALF AS H JOIN JULY AS J
ON H.FLAVOR = J.FLAVOR
GROUP BY H.FLAVOR) 

SELECT FLAVOR
FROM TOTAL
ORDER BY TOTAL_SUM DESC
LIMIT 3


-- 그룹별 조건에 맞는 식당 목록 출력하기 --
WITH REVIEW AS (SELECT MEMBER_ID, COUNT(REVIEW_ID) AS REVIEW_NUM
                FROM REST_REVIEW
                GROUP BY MEMBER_ID
                ORDER BY REVIEW_NUM DESC
                LIMIT 1)

SELECT P.MEMBER_NAME, R.REVIEW_TEXT, DATE_FORMAT(R.REVIEW_DATE, '%Y-%m-%d') AS REVIEW_DATE
FROM MEMBER_PROFILE AS P JOIN REST_REVIEW AS R
ON P.MEMBER_ID = R.MEMBER_ID
WHERE P.MEMBER_ID LIKE (SELECT MEMBER_ID 
                       FROM REVIEW)
ORDER BY R.REVIEW_DATE,R.REVIEW_TEXT


-- 서울에 위치한 식당 목록 출력하기 --
SELECT I.REST_ID, I.REST_NAME, I.FOOD_TYPE, I.FAVORITES, I.ADDRESS,ROUND(AVG(R.REVIEW_SCORE),2) AS SCORE
FROM REST_INFO AS I JOIN REST_REVIEW AS R
ON I.REST_ID = R.REST_ID
WHERE I.ADDRESS LIKE '서울%'
GROUP BY I.REST_ID
ORDER BY SCORE DESC,I.FAVORITES DESC


-- 우유와 요거트가 담긴 장바구니 --
SELECT CART_ID
FROM CART_PRODUCTS
WHERE CART_ID in
   (SELECT CART_ID
    FROM CART_PRODUCTS cp1
    WHERE NAME = 'Yogurt')
    AND NAME = 'Milk' 
ORDER BY CART_ID


-- 5월 식품들의 총매출 조회하기 --
SELECT O.PRODUCT_ID, P.PRODUCT_NAME, SUM(P.PRICE*O.AMOUNT) AS TOTAL_SALES
FROM FOOD_PRODUCT AS P JOIN FOOD_ORDER AS O 
ON P.PRODUCT_ID = O.PRODUCT_ID
WHERE DATE_FORMAT(O.PRODUCE_DATE, '%Y-%m') LIKE '2022-05'
GROUP BY O.PRODUCT_ID
ORDER BY TOTAL_SALES DESC, O.PRODUCT_ID


-- 식품분류별 가장 비싼 식품의 정보 조회하기 --
SELECT CATEGORY, PRICE, PRODUCT_NAME
FROM FOOD_PRODUCT AS F1
WHERE PRICE = (SELECT MAX(PRICE)
              FROM FOOD_PRODUCT AS F2
              WHERE F1.CATEGORY = F2.CATEGORY) AND CATEGORY IN ('과자','국','김치','식용유')
ORDER BY PRICE DESC


-- 입양 시각 구하기(2) --
WITH RECURSIVE HOUR_LIST AS (
SELECT 0 AS HOUR
UNION ALL
SELECT HOUR + 1
FROM HOUR_LIST
WHERE HOUR < 23)

SELECT A.HOUR AS "HOUR", COALESCE(B.CNT, 0) AS "COUNT"
FROM HOUR_LIST AS A
LEFT JOIN (SELECT HOUR(DATETIME) AS hour, COUNT(DISTINCT ANIMAL_ID) AS CNT 
FROM ANIMAL_OUTS
GROUP BY 1) B
ON A.HOUR = B.HOUR