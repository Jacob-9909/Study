-- 부모의 형질을 모두 가지는 대장균 찾기 --  이거 좀 애매함, 잘 이해가 안감, 비트연산자 확인해보기
SELECT C.ID, C.GENOTYPE, P.GENOTYPE PARENT_GENOTYPE
FROM ECOLI_DATA C
INNER JOIN ECOLI_DATA P
ON C.PARENT_ID = P.ID
WHERE C.GENOTYPE & P.GENOTYPE = P.GENOTYPE
ORDER BY C.ID;


-- 연도별 대장균 크기의 편차 구하기 --  WITH TABLE_NAME AS (SELECT)
WITH MAX_COLONY AS (
SELECT YEAR(DIFFERENTIATION_DATE) AS YEAR, MAX(SIZE_OF_COLONY) AS MAX_SIZE
    FROM ECOLI_DATA
    GROUP BY YEAR(DIFFERENTIATION_DATE))
    
SELECT YEAR(E.DIFFERENTIATION_DATE) AS YEAR, M.MAX_SIZE - E.SIZE_OF_COLONY AS YEAR_DEV, E.ID
    FROM ECOLI_DATA AS E JOIN MAX_COLONY AS M ON YEAR(E.DIFFERENTIATION_DATE) = M.YEAR
    ORDER BY YEAR,YEAR_DEV;


-- 분기별 분화된 대장균의 개체 수 구하기 --  WITH AS , 
WITH QUARTER_T AS (
SELECT ID, 
CASE 
    WHEN MONTH(DIFFERENTIATION_DATE) < 4 THEN '1Q'
    WHEN MONTH(DIFFERENTIATION_DATE) < 7 THEN '2Q'
    WHEN MONTH(DIFFERENTIATION_DATE) < 10 THEN '3Q'
ELSE '4Q'
END AS QUARTER
FROM ECOLI_DATA)


SELECT Q.QUARTER, COUNT(E.ID) AS ECOLI_COUNT
FROM ECOLI_DATA AS E JOIN QUARTER_T AS Q 
ON E.ID = Q.ID
GROUP BY Q.QUARTER
ORDER BY Q.QUARTER;


SELECT CASE WHEN QUARTER(DIFFERENTIATION_DATE) = '1' THEN '1Q'
            WHEN QUARTER(DIFFERENTIATION_DATE) = '2' THEN '2Q'
            WHEN QUARTER(DIFFERENTIATION_DATE) = '3' THEN '3Q'
            WHEN QUARTER(DIFFERENTIATION_DATE) = '4' THEN '4Q'
            END QUARTER,
       COUNT(*) ECOLI_COUNT
FROM ECOLI_DATA
GROUP BY 1
ORDER BY 1


-- 특정 물고기를 잡은 총 수 구하기 --
SELECT COUNT(ID) AS FISH_COUNT
FROM FISH_INFO AS F JOIN FISH_NAME_INFO AS I
ON F.FISH_TYPE = I.FISH_TYPE
WHERE FISH_NAME LIKE 'BASS' OR FISH_NAME LIKE 'SNAPPER';


-- 월별 잡은 물고기 수 구하기 --
SELECT COUNT(*) AS FISH_COUNT, MONTH(TIME) AS MONTH
FROM FISH_INFO
GROUP BY MONTH
ORDER BY MONTH;


-- 물고기 종류 별 잡은 수 구하기 --
SELECT COUNT(I.ID) AS FISH_COUNT, N.FISH_NAME
FROM FISH_INFO AS I JOIN FISH_NAME_INFO AS N
ON I.FISH_TYPE = N.FISH_TYPE
GROUP BY N.FISH_NAME
ORDER BY 1 DESC;


-- 노선별 평균 역 사이 거리 조회하기 --
SELECT ROUTE, 
CONCAT(ROUND(SUM(D_BETWEEN_DIST),1), 'km') AS TOTAL_DISTANCE, 
CONCAT(ROUND(AVG(D_BETWEEN_DIST),2), 'km') AS AVERAGE_DISTANCE
FROM SUBWAY_DISTANCE
GROUP BY ROUTE
ORDER BY ROUND(SUM(D_BETWEEN_DIST), 2) DESC;


-- 연도 별 평균 미세먼지 농도 조회하기 --
SELECT YEAR(YM) AS YEAR, ROUND(AVG(PM_VAL1),2) AS PM10, ROUND(AVG(PM_VAL2),2) AS "PM2.5"
FROM AIR_POLLUTION
WHERE LOCATION2 LIKE '수원'
GROUP BY YEAR(YM)
ORDER BY YEAR(YM);


-- 조건에 맞는 사원 정보 조회하기 --
WITH MAX_SCORE AS(
    SELECT EMP_NO, SUM(SCORE) AS SCORE 
    FROM HR_GRADE
    WHERE YEAR = 2022
    GROUP BY EMP_NO)
    

SELECT M.SCORE, E.EMP_NO, E.EMP_NAME, E.POSITION, E.EMAIL
FROM MAX_SCORE AS M JOIN HR_EMPLOYEES AS E 
ON M.EMP_NO = E.EMP_NO
WHERE M.SCORE = (SELECT MAX(SCORE) FROM MAX_SCORE);


-- 업그레이드 된 아이템 구하기 --  SUBQUERY 작성
SELECT I.ITEM_ID, I.ITEM_NAME, I.RARITY
FROM ITEM_INFO I INNER JOIN ITEM_TREE T
ON I.ITEM_ID = T.ITEM_ID
WHERE T.PARENT_ITEM_ID IN (SELECT I.ITEM_ID
                           FROM ITEM_INFO I INNER JOIN ITEM_TREE T
                           ON I.ITEM_ID = T.ITEM_ID
                           WHERE I.RARITY LIKE 'RARE')
ORDER BY I.ITEM_ID DESC;


-- ROOT 아이템 구하기 --
SELECT T.ITEM_ID, I.ITEM_NAME
FROM ITEM_TREE AS T JOIN ITEM_INFO AS I
ON T.ITEM_ID = I.ITEM_ID
WHERE T.PARENT_ITEM_ID IS NULL
ORDER BY T.ITEM_ID;


-- 조건에 맞는 아이템들의 가격의 총합 구하기 --
SELECT SUM(PRICE) AS TOTAL_PRICE
FROM ITEM_INFO
WHERE RARITY LIKE 'LEGEND';


-- 조건에 부합하는 중고거래 상태 조회하기 --
SELECT BOARD_ID, WRITER_ID, TITLE, PRICE ,
CASE 
    WHEN STATUS LIKE 'SALE' THEN '판매중'
    WHEN STATUS LIKE 'RESERVED' THEN '예약중'
    WHEN STATUS LIKE 'DONE' THEN '거래완료'
END AS STATUS
FROM USED_GOODS_BOARD
WHERE DATE_FORMAT(CREATED_DATE, '%Y-%m-%d') = '2022-10-05'
ORDER BY BOARD_ID DESC;


-- 자동차 평균 대여 기간 구하기 --  DATEDIFF(END_DATE, START_DATE)+1
SELECT CAR_ID, ROUND(AVG(DATEDIFF(END_DATE,START_DATE)+1),1) AS AVERAGE_DURATION
FROM CAR_RENTAL_COMPANY_RENTAL_HISTORY
GROUP BY CAR_ID
HAVING AVG(DATEDIFF(END_DATE,START_DATE)+1) >= 7
ORDER BY AVERAGE_DURATION DESC, CAR_ID DESC;


-- 자동차 종류 별 특정 옵션이 포함된 자동차 수 구하기 --
SELECT CAR_TYPE, COUNT(CAR_ID) AS CARS
FROM CAR_RENTAL_COMPANY_CAR
WHERE OPTIONS LIKE '%시트%'
GROUP BY CAR_TYPE
ORDER BY CAR_TYPE;


-- 조건에 맞는 도서와 저자 리스트 출력하기 --
SELECT B.BOOK_ID, A.AUTHOR_NAME, DATE_FORMAT(B.PUBLISHED_DATE, '%Y-%m-%d') AS PUBLISHED_DATE
FROM BOOK AS B JOIN AUTHOR AS A
ON B.AUTHOR_ID = A.AUTHOR_ID
WHERE CATEGORY LIKE '경제'
ORDER BY 3;


-- 성분으로 구분한 아이스크림 총 주문량 --
SELECT I.INGREDIENT_TYPE, SUM(H.TOTAL_ORDER) AS TOTAL_ORDER
FROM FIRST_HALF AS H JOIN ICECREAM_INFO AS I 
ON H.FLAVOR = I.FLAVOR
GROUP BY I.INGREDIENT_TYPE
ORDER BY SUM(H.TOTAL_ORDER);


-- 진료과별 총 예약 횟수 출력하기 -- 
SELECT MCDP_CD AS '진료과코드', COUNT(PT_NO) AS '5월예약건수'
FROM APPOINTMENT
WHERE LEFT(APNT_YMD, 7) = '2022-05'
GROUP BY MCDP_CD
ORDER BY COUNT(PT_NO) ASC, MCDP_CD ASC;


-- 상품 별 오프라인 매출 구하기 --
SELECT P.PRODUCT_CODE, P.PRICE * SUM(O.SALES_AMOUNT) AS SALES
FROM PRODUCT AS P JOIN OFFLINE_SALE AS O
ON P.PRODUCT_ID = O.PRODUCT_ID
GROUP BY P.PRODUCT_CODE
ORDER BY P.PRICE * SUM(O.SALES_AMOUNT) DESC, P.PRODUCT_CODE;


-- 가격대 별 상품 개수 구하기 --  DIV 몫 구하기
SELECT PRICE DIV 10000 *10000 AS PRICE_GROUP, COUNT(PRODUCT_ID) AS PRODUCTS
FROM PRODUCT
GROUP BY PRICE DIV 10000 *10000
ORDER BY PRICE DIV 10000 *10000;


-- 3월에 태어난 여성 회원 목록 출력하기 --
SELECT MEMBER_ID, MEMBER_NAME, GENDER, DATE_FORMAT(DATE_OF_BIRTH,'%Y-%m-%d') AS DATE_OF_BIRTH
FROM MEMBER_PROFILE
WHERE GENDER = 'W' AND MONTH(DATE_OF_BIRTH) = 3 AND TLNO IS NOT NULL
ORDER BY MEMBER_ID;


-- 가격이 제일 비싼 식품의 정보 출력하기 -- 
SELECT * 
FROM FOOD_PRODUCT
WHERE PRICE = (SELECT MAX(PRICE) FROM FOOD_PRODUCT);


-- DATETIME에서 DATE로 형 변환 -- 
SELECT * 
FROM FOOD_PRODUCT
WHERE PRICE = (SELECT MAX(PRICE) FROM FOOD_PRODUCT);


-- 입양 시각 구하기(1) -- 
SELECT HOUR(DATETIME) AS HOUR, COUNT(ANIMAL_ID) AS COUNT
FROM ANIMAL_OUTS
WHERE HOUR(DATETIME) BETWEEN 9 AND 19
GROUP BY HOUR(DATETIME)
ORDER BY HOUR(DATETIME);


-- NULL 처리하기 --
-- 코드를 입력하세요
SELECT ANIMAL_TYPE, CASE WHEN NAME IS NULL THEN 'No name' ELSE NAME END AS NAME, SEX_UPON_INTAKE
FROM ANIMAL_INS


-- 중복 제거하기 -- DISTINCT가 NULL값 무시함
SELECT COUNT(DISTINCT NAME) AS COUNT 
FROM ANIMAL_INS;


-- 동물 수 구하기 --
SELECT COUNT(1) AS COUNT FROM ANIMAL_INS;


--동명 동물 수 찾기 --
SELECT NAME, COUNT(ANIMAL_ID) AS COUNT 
FROM ANIMAL_INS
WHERE NAME IS NOT NULL
GROUP BY NAME
HAVING COUNT(ANIMAL_ID) >= 2
ORDER BY NAME;


-- 고양이와 개는 몇 마리 있을까 -- 
SELECT ANIMAL_TYPE, COUNT(ANIMAL_ID) AS COUNT
FROM ANIMAL_INS
GROUP BY ANIMAL_TYPE
ORDER BY ANIMAL_TYPE;


-- 최솟값 구하기 -- 
SELECT MIN(DATETIME) AS 시간
FROM ANIMAL_INS;